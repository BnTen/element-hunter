// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @default(cuid())
  name     String?
  email    String    @unique
  password String
  apiToken String    @unique @default(uuid())
  posts    Post[]
  scans    SeoScan[]
  folders  ScanFolder[]
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String?
  published Boolean  @default(false)
  authorId  String?
  author    User?    @relation(fields: [authorId], references: [id])
}

model SeoScan {
  id        String   @id @default(cuid())
  url       String
  data      Json     // Stockage de toutes les donn√©es JSON
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  folders   ScanFolderOnScan[]

  @@index([userId])
  @@index([createdAt])
  @@index([url])
}

model ScanFolder {
  id        String    @id @default(cuid())
  name      String
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  scans     ScanFolderOnScan[]
  createdAt DateTime  @default(now())
}

model ScanFolderOnScan {
  scanFolder   ScanFolder @relation(fields: [scanFolderId], references: [id])
  scanFolderId String
  seoScan      SeoScan    @relation(fields: [seoScanId], references: [id])
  seoScanId    String

  assignedAt   DateTime   @default(now())

  @@id([scanFolderId, seoScanId])
}
